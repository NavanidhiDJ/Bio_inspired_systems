import numpy as np

# Sample 2D data points (random clusters)
np.random.seed(0)
data = np.vstack([
    np.random.randn(50, 2) + np.array([5, 5]),
    np.random.randn(50, 2) + np.array([-5, -5]),
    np.random.randn(50, 2) + np.array([5, -5])
])

K = 3                 # Number of clusters
num_particles = 30
max_iter = 100
dim = 2               # x, y

class Particle:
    def __init__(self):
        # Each particle represents K centroids (K x dim)
        self.position = np.random.uniform(low=np.min(data, axis=0), 
                                          high=np.max(data, axis=0), 
                                          size=(K, dim))
        self.velocity = np.zeros((K, dim))
        self.best_position = self.position.copy()
        self.best_fitness = float('inf')

    def update_velocity(self, global_best_position, w=0.5, c1=1.5, c2=1.5):
        r1 = np.random.rand(K, dim)
        r2 = np.random.rand(K, dim)
        cognitive = c1 * r1 * (self.best_position - self.position)
        social = c2 * r2 * (global_best_position - self.position)
        self.velocity = w * self.velocity + cognitive + social

    def update_position(self):
        self.position += self.velocity

# Fitness function: sum of x^2 + y^2 of centroids
def fitness(centroids):
    return np.sum(centroids[:, 0]**2 + centroids[:, 1]**2)

# PSO main function
def pso():
    swarm = [Particle() for _ in range(num_particles)]
    global_best_position = None
    global_best_fitness = float('inf')

    for iteration in range(max_iter):
        for particle in swarm:
            fit = fitness(particle.position)

            if fit < particle.best_fitness:
                particle.best_fitness = fit
                particle.best_position = particle.position.copy()

            if fit < global_best_fitness:
                global_best_fitness = fit
                global_best_position = particle.position.copy()

        for particle in swarm:
            particle.update_velocity(global_best_position)
            particle.update_position()

        if iteration % 10 == 0 or iteration == max_iter - 1:
            print(f"Iteration {iteration+1}/{max_iter}, Best Fitness: {global_best_fitness:.4f}")

    return global_best_position

# Run PSO
best_centroids = pso()
print("\nOptimized centroids (minimizing sum of x^2 + y^2):\n", best_centroids)

# Assign points to closest centroid
def assign_clusters(centroids):
    clusters = [[] for _ in range(K)]
    for point in data:
        distances = np.linalg.norm(point - centroids, axis=1)
        cluster_idx = np.argmin(distances)
        clusters[cluster_idx].append(point)
    return clusters

clusters = assign_clusters(best_centroids)

for i, cluster in enumerate(clusters):
    print(f"Cluster {i+1} has {len(cluster)} points.")
